const mysql = require('mysql2/promise');
const fetch = require('node-fetch');

const db = mysql.createPool({
  host: '127.0.0.1',
  user: 'root',
  password: '310104',
  database: 'book_review'
});

// H√†m l·∫•y workId t·ª´ link d·∫°ng /books/OLxxxM ho·∫∑c /works/OLxxxW
const extractWorkId = (link) => {
  let match = link.match(/books\/(OL[\dA-Z]+M)/);
  if (match) return match[1];

  match = link.match(/works\/(OL[\dA-Z]+W)/);
  if (match) return match[1];

  return null;
};

const getDescriptionFromWork = async (olid) => {
  try {
    // N·∫øu olid l√† s√°ch edition th√¨ l·∫•y workId
    if (olid.endsWith('M')) {
      const editionRes = await fetch(`https://openlibrary.org/books/${olid}.json`);
      if (!editionRes.ok) throw new Error(`Kh√¥ng l·∫•y ƒë∆∞·ª£c edition ${olid}`);
      const edition = await editionRes.json();
      const workKey = edition.works?.[0]?.key?.split("/").pop();
      if (!workKey) return null;
      olid = workKey;
    }

    const workRes = await fetch(`https://openlibrary.org/works/${olid}.json`);
    if (!workRes.ok) throw new Error(`Kh√¥ng l·∫•y ƒë∆∞·ª£c work ${olid}`);
    const work = await workRes.json();

    let desc = null;

    if (typeof work.description === 'string') {
      desc = work.description;
    } else if (typeof work.description === 'object' && work.description?.value) {
      desc = work.description.value;
    }

    // N·∫øu m√¥ t·∫£ l√† m·ªôt URL th√¨ c·∫ßn fetch ti·∫øp ƒë·ªÉ l·∫•y ƒëo·∫°n m√¥ t·∫£ th·∫≠t s·ª±
    if (typeof desc === 'string' && desc.startsWith('http')) {
      const extraRes = await fetch(desc + '.json');  // Th√™m .json ƒë·ªÉ l·∫•y d·ªØ li·ªáu json
      if (!extraRes.ok) throw new Error(`Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ URL m√¥ t·∫£ ${desc}`);
      const extraData = await extraRes.json();

      // Ki·ªÉm tra xem c√≥ tr∆∞·ªùng excerpts kh√¥ng, th∆∞·ªùng l√† m·∫£ng
      if (Array.isArray(extraData.excerpts) && extraData.excerpts.length > 0) {
        // L·∫•y ƒëo·∫°n excerpt ƒë·∫ßu ti√™n
        const firstExcerpt = extraData.excerpts[0];
        if (typeof firstExcerpt === 'string') {
          desc = firstExcerpt;
        } else if (typeof firstExcerpt === 'object' && firstExcerpt.excerpt) {
          desc = firstExcerpt.excerpt;
        } else {
          desc = null;
        }
      } else {
        desc = null;
      }
    }

    return desc || null;

  } catch (err) {
    console.error(`‚ùå L·ªói l·∫•y m√¥ t·∫£ cho ${olid}:`, err.message);
    return null;
  }
};


const updateDescriptions = async () => {
  try {
    const [books] = await db.query(`
      SELECT id, link, description FROM books 
      WHERE (description IS NULL OR description = '' OR description LIKE 'https://openlibrary.org/%')
      AND link LIKE '%openlibrary.org/%'
    `);

    for (const book of books) {
      const workId = extractWorkId(book.link);
      if (!workId) {
        console.log(`‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c workId t·ª´ link s√°ch ID ${book.id}`);
        continue;
      }

      const description = await getDescriptionFromWork(workId);
      if (description) {
        // Ki·ªÉm tra n·∫øu m√¥ t·∫£ l√† URL (link ƒë·∫øn trang OpenLibrary)
        if (description.includes('openlibrary.org')) {
          console.log(`‚ö†Ô∏è M√¥ t·∫£ c·ªßa s√°ch ID ${book.id} l√† URL, s·∫Ω b·ªè qua`);
          continue;
        }
        await db.query('UPDATE books SET description = ? WHERE id = ?', [description, book.id]);
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√¥ t·∫£ cho s√°ch ID ${book.id}`);
      } else {
        console.log(`‚ö†Ô∏è Kh√¥ng c√≥ m√¥ t·∫£ cho s√°ch ID ${book.id}`);
      }
    }

    console.log('üéâ ƒê√£ ho√†n t·∫•t c·∫≠p nh·∫≠t m√¥ t·∫£.');
  } catch (err) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t m√¥ t·∫£:', err.message);
  } finally {
    await db.end();
  }
};

updateDescriptions();
